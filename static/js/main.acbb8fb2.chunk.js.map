{"version":3,"sources":["utils/math-tasks.js","DisplayBox/index.js","DisplayBox/DisplayBox.jsx","InputBox/index.js","InputBox/InputBox.jsx","SubmitButton/index.js","SubmitButton/SubmitButton.jsx","TaskOptionsPanel/index.js","TaskOptionsPanel/TaskOptionsPanel.jsx","MathView/MathView.jsx","MathView/index.js","StreakBox/index.js","StreakBox/StreakBox.jsx","tasks/simple.js","App.jsx","serviceWorker.js","index.js"],"names":["getRandomInt","min","max","Math","floor","random","getSimpleAddition","userFills","left","right","answer","operator","getUserFills","getSimpleMultiplication","getSimpleDivision","values","reduce","acc","cur","getDivision","range","factor","randomUserFills","getSimpleSubtraction","getTimesTable","DisplayBox","props","className","value","InputBox","onValueChangeHandler","intValue","onSubmit","autoFocus","type","isNaN","onChange","event","parseInt","target","onKeyUp","keyCode","SubmitButton","data-testid","onClick","onClickHandler","buttonText","TaskOptionsPanel","optionButtons","controlInfo","map","item","classes","displayText","key","results","MathView","onSubmitHandler","state","result","onNewTask","isCorrect","task","streakHandler","setState","prevState","getTaskCreator","taskData","taskFunctions","taskType","getTaskCreatorArgs","display","apply","onTaskTypeChange","newTask","controls","filter","newFunction","args","onInputValueChange","newValue","console","debug","inputBox","this","resultsText","submitButtonText","React","Component","StreakBox","streak","getHighScore","window","localStorage","getItem","winningClass","setItem","currentText","bestText","require","SYMBOLS","USERFILLS","getSimpleTasks","getTimesTablesTask","getDivisionTasks","App","tasks","useState","choice","setChoice","setStreak","data","call","description","latest","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.acbb8fb2.chunk.js","sourcesContent":["const getRandomInt = (min, max) => {\n    // FIX getRandomInt(0, 2) will only return 0 or 1, not 0, 1, 2\n    return Math.floor(Math.random() * max) + min;\n};\n\nconst getSimpleAddition = (userFills = 'right') => {\n    const left = getRandomInt(1, 12);\n    const right = getRandomInt(1, 12);\n    const answer = left + right;\n    const operator = \"+\";\n    userFills = userFills === 'random' ? getUserFills() : userFills;\n\n    return { left, right, answer, operator, userFills };\n};\n\nconst getSimpleMultiplication = (userFills='right') => {\n    const left = getRandomInt(1, 12);\n    const right = getRandomInt(1, 12);\n    const answer = left * right;\n    const operator = \"ร\";\n\n    userFills = userFills === 'random' ? getUserFills() : userFills;\n\n    return { left, right, answer, operator, userFills };\n};\n\nconst getSimpleDivision = (userFills='right') => {\n    const values = [getRandomInt(1, 10), getRandomInt(1, 10)];\n    const left = values.reduce((acc, cur) => acc * cur);\n    const right = Math.max(...values);\n    const answer = Math.min(...values);\n    const operator = 'รท';\n\n    userFills = userFills === 'random' ? getUserFills() : userFills;\n\n    return { left, right, answer, operator, userFills };\n};\n\nconst getDivision = (userFills = 'answer', range = 10, factor = 2) => {\n    const answer = getRandomInt(1, range);\n    const randomUserFills = ['left', 'answer'][getRandomInt(0, 2)];\n\n    return {\n        left: factor * answer,\n        right: factor,\n        answer,\n        operator: 'รท',\n        userFills: userFills === 'random' ? randomUserFills : userFills,\n    };\n};\n\nconst getSimpleSubtraction = (userFills='right') => {\n    const values = [getRandomInt(1, 20), getRandomInt(1, 20)];\n    const left = Math.max(...values);\n    const answer = Math.min(...values); \n    const right = left - answer;\n    const operator = \"โ\";\n\n    userFills = userFills === 'random' ? getUserFills() : userFills;\n\n    return { left, right, answer, operator, userFills };\n};\n\nconst getTimesTable = (userFills = 'answer', range = 10, factor = 2) => {\n    const right = getRandomInt(1, range);\n    // todo userfills can be right or answer if left is always the multiplier\n    const randomUserFills = ['right', 'answer'][getRandomInt(0, 2)];\n    return {\n        left: factor,\n        right: right,\n        answer: factor * right,\n        operator: 'ร',\n        userFills: userFills === 'random' ? randomUserFills : userFills,\n    };\n};\n\nconst getUserFills = () => {\n    return ['left', 'right', 'answer'][getRandomInt(1, 3) - 1];\n};\n\nexport { \n    getSimpleAddition, \n    getSimpleMultiplication, \n    getSimpleDivision, \n    getSimpleSubtraction, \n    getTimesTable,\n    getDivision\n };","import DisplayBox from './DisplayBox';\n\nexport default DisplayBox;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './DisplayBox.scss';\n\nconst DisplayBox = (props) => {\n    return (\n        <div className=\"DisplayBox\">\n            <span>\n                {props.value}\n            </span>\n        </div>\n    );\n};\n\nDisplayBox.propTypes = {\n    value: PropTypes.number,\n};\n\nexport default DisplayBox;","import InputBox from './InputBox';\n\nexport default InputBox;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './InputBox.scss';\n\nconst InputBox = (props) => {\n    const { onValueChangeHandler, intValue, onSubmit } = props;\n    \n    const onChangeHandler = event => onValueChangeHandler(parseInt(event.target.value, 10));\n\n    const onKey = (event) => {\n        if (event.keyCode === 13) {\n            onSubmit();\n        }\n    };\n\n    return (\n        <input\n            autoFocus\n            className=\"InputBox\"\n            type=\"number\"\n            value={isNaN(intValue) ? \"\" : intValue}\n            onChange={onChangeHandler}\n            onKeyUp={onKey}\n        />\n    );\n};\n\nInputBox.propTypes = {\n    intValue: PropTypes.oneOfType([\n        PropTypes.number, PropTypes.string,\n    ]),\n    onValueChangeHandler: PropTypes.func,\n    onSubmit: PropTypes.func,\n};\n\nexport default InputBox;","import SubmitButton from './SubmitButton';\n\nexport default SubmitButton;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './SubmitButton.scss';\n\nconst SubmitButton = (props) => {\n    return (\n        <div className=\"SubmitButton\">\n            <button data-testid=\"submitButton\"\n                    type=\"submit\"\n                    onClick={props.onClickHandler}>\n                {props.buttonText}\n            </button>\n        </div>\n    );\n};\n\nSubmitButton.propTypes = {\n    onClickHandler: PropTypes.func,\n    buttonText: PropTypes.string,\n};\n\nexport default SubmitButton;","import TaskOptionsPanel from './TaskOptionsPanel';\n\nexport default TaskOptionsPanel;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './TaskOptionsPanel.scss';\n\nconst TaskOptionsPanel = (props) => {\n    const optionButtons = props.controlInfo.map((item) => {\n        const classes = item.displayText === props.displayText\n            ? 'TaskOptionsPanel TaskOptionsPanel-selected'\n            : 'TaskOptionsPanel';\n\n        return (\n            <button\n            className={classes}\n            key={item.displayText}\n            type=\"button\"\n            onClick={() => props.onClickHandler(item.displayText)}>\n                {item.displayText}\n            </button>);\n    });\n\n    return (\n        <div>\n            {optionButtons}\n        </div>\n    );\n};\n\nTaskOptionsPanel.propTypes = {\n    onClickHandler: PropTypes.func,\n    displayText: PropTypes.string,\n    controlInfo: PropTypes.arrayOf(PropTypes.shape({\n        taskType: PropTypes.string,\n        displayText: PropTypes.string,\n    })),\n};\n\nexport default TaskOptionsPanel;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport DisplayBox from '../DisplayBox';\nimport InputBox from '../InputBox';\nimport SubmitButton from '../SubmitButton';\nimport TaskOptionsPanel from '../TaskOptionsPanel';\n\nimport './MathView.scss';\n\nconst results = {\n    UNKNOWN: 0,\n    INCORRECT: 1,\n    CORRECT: 2,\n};\n\nclass MathView extends React.Component {\n    constructor(props) {\n        super(props);\n        const { controls, taskFunctions } = props.taskData;\n        const { userFills } = props.taskData.display;\n        const { range, factor } = controls[0];\n\n        this.state = {\n            result: results.UNKNOWN,\n            value: \"\",\n            displayText: controls[0].displayText, // TODO, this is acting as an Unique ID\n            taskType: controls[0].taskType,\n            task: taskFunctions[controls[0].taskType].apply(this, [userFills, range, factor]),\n            range,\n            factor,\n        };\n    }\n\n    componentDidMount() {\n        // eslint-disable-next-line no-console\n        console.debug('component mounted');\n    }\n\n    componentWillUnmount() {\n        // eslint-disable-next-line no-console\n        console.debug('component unmounting');\n    }\n\n    onSubmitHandler = () => {\n        if (this.state.result === results.CORRECT) {\n            this.onNewTask();\n        } else {\n            const isCorrect = this.state.value === this.state.task[this.state.task.userFills];\n            const { streakHandler } = this.props;\n\n            this.setState(prevState => ({\n                result: isCorrect ? results.CORRECT : results.INCORRECT,\n                value: isCorrect ? prevState.value : \"\",\n            }));\n\n            const latest = isCorrect ? 1 : 0;\n            streakHandler(latest);\n        }\n    }\n\n    getTaskCreator = () => {\n        return this.props.taskData.taskFunctions[this.state.taskType];\n    }\n\n    getTaskCreatorArgs = () => [this.props.taskData.display.userFills, this.state.range, this.state.factor];\n\n    onNewTask = () => {\n        this.setState({\n            task: this.getTaskCreator().apply(this, this.getTaskCreatorArgs()),\n            value: \"\",\n            result: results.UNKNOWN,\n        });\n    }\n\n    onTaskTypeChange = (displayText) => {\n        const newTask = this.props.taskData.controls.filter(item => item.displayText === displayText)[0];\n        const newFunction = this.props.taskData.taskFunctions[newTask.taskType];\n        const { range, factor } = newTask;\n        const args = [this.props.taskData.display.userFills, range, factor];\n\n        this.setState({\n            taskType: newTask.taskType,\n            displayText: newTask.displayText,\n            value: \"\",\n            result: null,\n            task: newFunction.apply(this, args),\n            range,\n            factor,\n        });\n    }\n\n    onInputValueChange = (newValue) => {\n        this.setState({\n            value: newValue,\n        });\n    }\n\n    render() {\n        const inputBox = (<InputBox intValue={this.state.value}\n                                    onSubmit={this.onSubmitHandler}\n                                    onValueChangeHandler={this.onInputValueChange} />);\n        const { controls } = this.props.taskData;\n        const { left, right, answer } = this.state.task;\n        let resultsText = \"Do your best!\";\n        if (this.state.result === results.CORRECT) {\n            resultsText = \"Correct, well done!\";\n        } else if (this.state.result === results.INCORRECT) {\n            resultsText = \"Unlucky, keep trying!\";\n        }\n\n        const submitButtonText = this.state.result === results.CORRECT ? \"Next\" : \"Submit\";\n\n        return (\n            <>\n                <div className=\"MathView\">\n                    {this.state.task.userFills === \"left\" ? inputBox : <DisplayBox value={left} />}\n                    <span className=\"MathView-sign\">\n                        {this.state.task.operator}\n                    </span>\n                    {this.state.task.userFills === \"right\" ? inputBox : <DisplayBox value={right} />}\n                    <span className=\"MathView-sign\">=</span>\n                    {this.state.task.userFills === \"answer\" ? inputBox : <DisplayBox value={answer} />}\n                </div>\n                <SubmitButton buttonText={submitButtonText}\n                              onClickHandler={this.onSubmitHandler} />\n                <div>\n                    <h3>\n                        {resultsText}\n                    </h3>\n                </div>\n                <TaskOptionsPanel\n                    controlInfo={controls}\n                    displayText={this.state.displayText}\n                    onClickHandler={this.onTaskTypeChange} />\n            </>\n        );\n    }\n}\n\nMathView.propTypes = {\n    streakHandler: PropTypes.func,\n    taskData: PropTypes.shape({\n        controls: PropTypes.arrayOf(PropTypes.shape({\n            taskType: PropTypes.string.isRequired,\n            displayText: PropTypes.string.isRequired,\n            range: PropTypes.number,\n            factor: PropTypes.number,\n        })),\n        taskFunctions: PropTypes.objectOf(PropTypes.func),\n        display: PropTypes.shape({\n            userFills: PropTypes.oneOf(['left', 'right', 'answer', 'random']).isRequired,\n        }),\n    }),\n};\n\nexport default MathView;","import MathView from './MathView';\n\nexport default MathView;","import StreakBox from './StreakBox';\n\nexport default StreakBox;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './StreakBox.scss';\n\nconst StreakBox = props => {\n    const { streak } = props;\n    const lsHiScoreKey = 'kidsmaths.hiscore';\n\n    const getHighScore = () => parseInt(window.localStorage.getItem(lsHiScoreKey), 10) || 0;\n    \n    const setHighScore = () => window.localStorage.setItem(lsHiScoreKey, streak);\n\n    let winningClass = \"\";\n\n    if (streak > 0 && streak >= getHighScore()) {\n        setHighScore(streak);\n        winningClass = \"StreakBox-on-roll\";\n    }\n\n    const currentText = `Current Streak: ${streak}`;\n    const bestText = `Best Streak: ${getHighScore()}`;\n\n    return(<div className=\"StreakBox\">\n        <span className={winningClass}>\n            {currentText}\n        </span>\n        <br/>\n        <span className={winningClass}>\n            {bestText}\n        </span>\n    </div>);\n\n};\n\nStreakBox.propTypes = {\n    streak: PropTypes.number.isRequired,\n};\n\nexport default StreakBox;","const {\n    getSimpleAddition,\n    getSimpleMultiplication,\n    getSimpleDivision,\n    getSimpleSubtraction,\n    getTimesTable,\n    getDivision,\n} = require('../utils/math-tasks');\n\nconst SYMBOLS = {\n    ADD: \"+\",\n    SUB: \"โ\",\n    MULT: \"ร\",\n    DIV: \"รท\",\n};\n\nconst USERFILLS = {\n    LEFT: 'left',\n    RIGHT: 'right',\n    RANDOM: 'random',\n};\n\nconst getSimpleTasks = () => {\n    return {\n    \"description\": \"Multi-choice arithemetic\",\n    \"controls\": [\n        { \"displayText\": SYMBOLS.ADD, \"taskType\": \"addition\" },\n        { \"displayText\": SYMBOLS.MULT, \"taskType\": \"multiplication\" },\n        { \"displayText\": SYMBOLS.DIV, \"taskType\": \"division\" },\n        { \"displayText\": SYMBOLS.SUB, \"taskType\": \"subtraction\" },\n    ],\n    \"taskFunctions\": {\n        \"addition\": getSimpleAddition,\n        \"multiplication\": getSimpleMultiplication,\n        \"division\": getSimpleDivision,\n        \"subtraction\" : getSimpleSubtraction,\n    },\n    \"display\": {\n        \"userFills\": USERFILLS.RANDOM,\n    },\n};\n};\n\nconst getTimesTablesTask = () => {\n    return {\n        \"description\": \"times tables\",\n        \"controls\": [\n            { \"displayText\": \"2X\", \"taskType\" : \"multiplication\", \"range\": 12, \"factor\": 2 },\n            { \"displayText\": \"3X\", \"taskType\" : \"multiplication\", \"range\": 12, \"factor\": 3 },\n            { \"displayText\": \"4X\", \"taskType\" : \"multiplication\", \"range\": 12, \"factor\": 4 },\n            { \"displayText\": \"5X\", \"taskType\" : \"multiplication\", \"range\": 12, \"factor\": 5 },\n            { \"displayText\": \"10X\", \"taskType\" : \"multiplication\", \"range\": 12, \"factor\": 10 },\n        ],\n        \"taskFunctions\": {\n            \"multiplication\": getTimesTable,\n        },\n        \"display\": {\n            \"userFills\": USERFILLS.RANDOM,\n        },\n    };\n};\n\nconst getDivisionTasks = () => {\n    const division = 'division';\n\n    return {\n        \"description\": division,\n        controls: [\n            { displayText: \"รท2\", taskType: division, range: 12, factor: 2 },\n            { displayText: \"รท3\", taskType: division, range: 12, factor: 3 },\n            { displayText: \"รท4\", taskType: division, range: 12, factor: 4 },\n            { displayText: \"รท5\", taskType: division, range: 12, factor: 5 },\n        ],\n        taskFunctions: {\n            [division]: getDivision,\n\n        },\n        display: {\n            userFills: USERFILLS.RANDOM,\n        },\n    };\n};\n\nexport { getSimpleTasks, getTimesTablesTask, getDivisionTasks };","import React, { useState } from 'react';\nimport './App.scss';\n\nimport MathView from './MathView';\nimport StreakBox from './StreakBox';\nimport { getSimpleTasks, getTimesTablesTask, getDivisionTasks } from './tasks/simple.js';\n\nconst App = () => {\n    const tasks = [getSimpleTasks, getTimesTablesTask, getDivisionTasks];\n    const [choice, setChoice] = useState(0);\n    const [streak, setStreak] = useState(0);\n    const data = tasks[choice].call();\n    const streakHandler = latest => {\n        const newStreak = latest === 0 ? 0 : streak + 1;\n        setStreak(newStreak);\n    };\n\n    return (\n        <div className=\"App-container\">\n            <div className=\"App\">\n                <MathView key={data.description}\n                          streakHandler={streakHandler}\n                          taskData={data}/>\n                <StreakBox streak={streak} />\n                <div className=\"App-switcher\">\n                    <span>Other tasks...</span>\n                    {choice !== 0 && <button type=\"button\"\n                                             onClick={() => setChoice(0)}>\n                        Mixed Tasks\n                    </button>}\n                    {choice !== 1 && <button type=\"button\"\n                                             onClick={() => setChoice(1)}>\n                        Times Tables\n                    </button>}\n                    {choice !== 2 && <button type=\"button\"\n                                             onClick={() => setChoice(2)}>\n                        Division\n                    </button>}\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}